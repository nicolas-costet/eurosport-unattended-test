import {createAsyncThunk, createSlice, PayloadAction} from '@reduxjs/toolkit';
import { RootState } from '../store';
import { fetchPlayers } from './playerAPI';

export interface PlayersState {
    players: Player[];
    selectedPlayerId: string | undefined;
    status: 'idle' | 'loading' | 'failed';
}

export interface Picture {
    url: string;
}

export interface Country {
    picture: Picture;
    code: string;
}

export interface Stats {
    rank: number;
    points: number;
    weight: number;
    height: number;
    age: number;
}

export interface Player {
    id: string;
    firstname: string;
    lastname: string;
    shortname: string;
    sex: 'MAN' | 'WOMAN';
    picture: Picture;
    country: Country;
    stats: Stats;
}



const initialState: PlayersState = {
    players: [],
    selectedPlayerId: undefined,
    status: 'idle',
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const loadPlayers = createAsyncThunk(
    'players/fetchPlayers',
    async () => {
        const response = await fetchPlayers();
        // The value we return becomes the `fulfilled` action payload
        return response.data.players;
    }
);

export const playersSlice = createSlice({
    name: 'players',
    initialState,
    // The `reducers` field lets us define reducers and generate associated actions
    reducers: {
        setSelectedPlayerId: (state, action: PayloadAction<string | undefined>) => {
            state.selectedPlayerId = action.payload;
        }
    },
    // The `extraReducers` field lets the slice handle actions defined elsewhere,
    // including actions generated by createAsyncThunk or in other slices.
    extraReducers: (builder) => {
        builder
            .addCase(loadPlayers.pending, (state) => {
                state.status = 'loading';
            })
            .addCase(loadPlayers.fulfilled, (state, action) => {
                state.status = 'idle';
                state.players = action.payload;
            })
            .addCase(loadPlayers.rejected, (state) => {
                state.status = 'failed';
            });
    },
});

export const { setSelectedPlayerId } = playersSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const selectPlayers = (state: RootState) => state.players.players;

export const selectLoadPlayersStatus = (state: RootState) => state.players.status;

export const selectSelectedPlayerId = (state: RootState) => state.players.selectedPlayerId;

export default playersSlice.reducer;