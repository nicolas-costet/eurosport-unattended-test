import {createAsyncThunk, createSlice} from '@reduxjs/toolkit';
import { RootState } from '../../app/store';
import { fetchMatches } from './matchAPI';
import {Country} from "../players/playerSlice";

export interface MatchesState {
    matches: Match[];
    status: 'idle' | 'loading' | 'failed';
}

export interface MatchPlayer {
    id: string;
    firstname: string;
    lastname: string;
    shortname: string;
    country: Country;
}

export interface MatchWinner {
    id: string;
}

export interface Match {
    id: string;
    players: MatchPlayer[];
    winner: MatchWinner;
    startTime: string;
    endTime: string;
}



const initialState: MatchesState = {
    matches: [],
    status: 'idle',
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const loadMatches = createAsyncThunk(
    'matches/fetchMatches',
    async () => {
        const response = await fetchMatches();
        // The value we return becomes the `fulfilled` action payload
        return response.data.matches;
    }
);

export const matchesSlice = createSlice({
    name: 'matches',
    initialState,
    // The `reducers` field lets us define reducers and generate associated actions
    reducers: {

    },
    // The `extraReducers` field lets the slice handle actions defined elsewhere,
    // including actions generated by createAsyncThunk or in other slices.
    extraReducers: (builder) => {
        builder
            .addCase(loadMatches.pending, (state) => {
                state.status = 'loading';
            })
            .addCase(loadMatches.fulfilled, (state, action) => {
                state.status = 'idle';
                state.matches = action.payload;
            })
            .addCase(loadMatches.rejected, (state) => {
                state.status = 'failed';
            });
    },
});


// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const selectMatches = (state: RootState) => state.matches.matches;

export const selectSelectedPlayerWinningMatches = (state: RootState) => state.matches.matches.filter(match => state.players.selectedPlayerId === match.winner.id);

export default matchesSlice.reducer;